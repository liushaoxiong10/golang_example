// Code generated by protoc-gen-go. DO NOT EDIT.
// source: local.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LocalName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalName) Reset()         { *m = LocalName{} }
func (m *LocalName) String() string { return proto.CompactTextString(m) }
func (*LocalName) ProtoMessage()    {}
func (*LocalName) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf1a48d01603033, []int{0}
}

func (m *LocalName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalName.Unmarshal(m, b)
}
func (m *LocalName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalName.Marshal(b, m, deterministic)
}
func (m *LocalName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalName.Merge(m, src)
}
func (m *LocalName) XXX_Size() int {
	return xxx_messageInfo_LocalName.Size(m)
}
func (m *LocalName) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalName.DiscardUnknown(m)
}

var xxx_messageInfo_LocalName proto.InternalMessageInfo

func (m *LocalName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LocalRotate struct {
	X                    int32    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalRotate) Reset()         { *m = LocalRotate{} }
func (m *LocalRotate) String() string { return proto.CompactTextString(m) }
func (*LocalRotate) ProtoMessage()    {}
func (*LocalRotate) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf1a48d01603033, []int{1}
}

func (m *LocalRotate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalRotate.Unmarshal(m, b)
}
func (m *LocalRotate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalRotate.Marshal(b, m, deterministic)
}
func (m *LocalRotate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalRotate.Merge(m, src)
}
func (m *LocalRotate) XXX_Size() int {
	return xxx_messageInfo_LocalRotate.Size(m)
}
func (m *LocalRotate) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalRotate.DiscardUnknown(m)
}

var xxx_messageInfo_LocalRotate proto.InternalMessageInfo

func (m *LocalRotate) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *LocalRotate) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*LocalName)(nil), "pb.LocalName")
	proto.RegisterType((*LocalRotate)(nil), "pb.LocalRotate")
}

func init() { proto.RegisterFile("local.proto", fileDescriptor_aaf1a48d01603033) }

var fileDescriptor_aaf1a48d01603033 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xc9, 0x4f, 0x4e,
	0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe7, 0xe2, 0xf4,
	0x01, 0x09, 0xf9, 0x25, 0xe6, 0xa6, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x9a, 0x5c, 0xdc, 0x60, 0x05, 0x41, 0xf9, 0x25,
	0x89, 0x25, 0xa9, 0x42, 0x3c, 0x5c, 0x8c, 0x15, 0x60, 0x79, 0xd6, 0x20, 0xc6, 0x0a, 0x10, 0xaf,
	0x52, 0x82, 0x09, 0xc2, 0xab, 0x34, 0xaa, 0xe2, 0xe2, 0x03, 0x2b, 0x0d, 0x29, 0x4a, 0xcc, 0x2b,
	0xce, 0x01, 0xa9, 0x36, 0xe7, 0x12, 0x44, 0xd2, 0x1c, 0x92, 0x0f, 0xb6, 0x85, 0x5f, 0xaf, 0x20,
	0x49, 0x0f, 0x49, 0x58, 0x8a, 0x17, 0x2e, 0x00, 0x92, 0x57, 0x62, 0xd0, 0x60, 0x14, 0xd2, 0xe7,
	0x62, 0x77, 0x4f, 0x2d, 0xf1, 0xcd, 0x2f, 0x22, 0x4a, 0xb9, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x4b,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x3a, 0xfe, 0x9e, 0xe1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocalTranslateClient is the client API for LocalTranslate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalTranslateClient interface {
	LocalRotateToName(ctx context.Context, opts ...grpc.CallOption) (LocalTranslate_LocalRotateToNameClient, error)
	GetMore(ctx context.Context, opts ...grpc.CallOption) (LocalTranslate_GetMoreClient, error)
}

type localTranslateClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalTranslateClient(cc grpc.ClientConnInterface) LocalTranslateClient {
	return &localTranslateClient{cc}
}

func (c *localTranslateClient) LocalRotateToName(ctx context.Context, opts ...grpc.CallOption) (LocalTranslate_LocalRotateToNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalTranslate_serviceDesc.Streams[0], "/pb.LocalTranslate/LocalRotateToName", opts...)
	if err != nil {
		return nil, err
	}
	x := &localTranslateLocalRotateToNameClient{stream}
	return x, nil
}

type LocalTranslate_LocalRotateToNameClient interface {
	Send(*LocalRotate) error
	CloseAndRecv() (*LocalName, error)
	grpc.ClientStream
}

type localTranslateLocalRotateToNameClient struct {
	grpc.ClientStream
}

func (x *localTranslateLocalRotateToNameClient) Send(m *LocalRotate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localTranslateLocalRotateToNameClient) CloseAndRecv() (*LocalName, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LocalName)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localTranslateClient) GetMore(ctx context.Context, opts ...grpc.CallOption) (LocalTranslate_GetMoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalTranslate_serviceDesc.Streams[1], "/pb.LocalTranslate/GetMore", opts...)
	if err != nil {
		return nil, err
	}
	x := &localTranslateGetMoreClient{stream}
	return x, nil
}

type LocalTranslate_GetMoreClient interface {
	Send(*LocalRotate) error
	Recv() (*LocalName, error)
	grpc.ClientStream
}

type localTranslateGetMoreClient struct {
	grpc.ClientStream
}

func (x *localTranslateGetMoreClient) Send(m *LocalRotate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localTranslateGetMoreClient) Recv() (*LocalName, error) {
	m := new(LocalName)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalTranslateServer is the server API for LocalTranslate service.
type LocalTranslateServer interface {
	LocalRotateToName(LocalTranslate_LocalRotateToNameServer) error
	GetMore(LocalTranslate_GetMoreServer) error
}

// UnimplementedLocalTranslateServer can be embedded to have forward compatible implementations.
type UnimplementedLocalTranslateServer struct {
}

func (*UnimplementedLocalTranslateServer) LocalRotateToName(srv LocalTranslate_LocalRotateToNameServer) error {
	return status.Errorf(codes.Unimplemented, "method LocalRotateToName not implemented")
}
func (*UnimplementedLocalTranslateServer) GetMore(srv LocalTranslate_GetMoreServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMore not implemented")
}

func RegisterLocalTranslateServer(s *grpc.Server, srv LocalTranslateServer) {
	s.RegisterService(&_LocalTranslate_serviceDesc, srv)
}

func _LocalTranslate_LocalRotateToName_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalTranslateServer).LocalRotateToName(&localTranslateLocalRotateToNameServer{stream})
}

type LocalTranslate_LocalRotateToNameServer interface {
	SendAndClose(*LocalName) error
	Recv() (*LocalRotate, error)
	grpc.ServerStream
}

type localTranslateLocalRotateToNameServer struct {
	grpc.ServerStream
}

func (x *localTranslateLocalRotateToNameServer) SendAndClose(m *LocalName) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localTranslateLocalRotateToNameServer) Recv() (*LocalRotate, error) {
	m := new(LocalRotate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalTranslate_GetMore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalTranslateServer).GetMore(&localTranslateGetMoreServer{stream})
}

type LocalTranslate_GetMoreServer interface {
	Send(*LocalName) error
	Recv() (*LocalRotate, error)
	grpc.ServerStream
}

type localTranslateGetMoreServer struct {
	grpc.ServerStream
}

func (x *localTranslateGetMoreServer) Send(m *LocalName) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localTranslateGetMoreServer) Recv() (*LocalRotate, error) {
	m := new(LocalRotate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LocalTranslate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LocalTranslate",
	HandlerType: (*LocalTranslateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LocalRotateToName",
			Handler:       _LocalTranslate_LocalRotateToName_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMore",
			Handler:       _LocalTranslate_GetMore_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "local.proto",
}
